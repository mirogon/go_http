// Code generated by MockGen. DO NOT EDIT.
// Source: httpresponsewriter.go

// Package mock_http_ is a generated GoMock package.
package mock_http_

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	http_ "github.com/mirogon/go_http"
)

// MockHttpResponseWriter is a mock of HttpResponseWriter interface.
type MockHttpResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpResponseWriterMockRecorder
}

// MockHttpResponseWriterMockRecorder is the mock recorder for MockHttpResponseWriter.
type MockHttpResponseWriterMockRecorder struct {
	mock *MockHttpResponseWriter
}

// NewMockHttpResponseWriter creates a new mock instance.
func NewMockHttpResponseWriter(ctrl *gomock.Controller) *MockHttpResponseWriter {
	mock := &MockHttpResponseWriter{ctrl: ctrl}
	mock.recorder = &MockHttpResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpResponseWriter) EXPECT() *MockHttpResponseWriterMockRecorder {
	return m.recorder
}

// AddCookie mocks base method.
func (m *MockHttpResponseWriter) AddCookie(cookie http_.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCookie", cookie)
}

// AddCookie indicates an expected call of AddCookie.
func (mr *MockHttpResponseWriterMockRecorder) AddCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCookie", reflect.TypeOf((*MockHttpResponseWriter)(nil).AddCookie), cookie)
}

// AddHeader mocks base method.
func (m *MockHttpResponseWriter) AddHeader(name, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHeader", name, value)
}

// AddHeader indicates an expected call of AddHeader.
func (mr *MockHttpResponseWriterMockRecorder) AddHeader(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeader", reflect.TypeOf((*MockHttpResponseWriter)(nil).AddHeader), name, value)
}

// DeleteHeader mocks base method.
func (m *MockHttpResponseWriter) DeleteHeader(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteHeader", name)
}

// DeleteHeader indicates an expected call of DeleteHeader.
func (mr *MockHttpResponseWriterMockRecorder) DeleteHeader(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeader", reflect.TypeOf((*MockHttpResponseWriter)(nil).DeleteHeader), name)
}

// Send mocks base method.
func (m *MockHttpResponseWriter) Send() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send")
}

// Send indicates an expected call of Send.
func (mr *MockHttpResponseWriterMockRecorder) Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHttpResponseWriter)(nil).Send))
}

// SetBody mocks base method.
func (m *MockHttpResponseWriter) SetBody(body []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBody", body)
}

// SetBody indicates an expected call of SetBody.
func (mr *MockHttpResponseWriterMockRecorder) SetBody(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBody", reflect.TypeOf((*MockHttpResponseWriter)(nil).SetBody), body)
}
